openapi: 3.0.0
info: 
  title:	products API
  description: Master cloud apps TFM products API.
  version: 1.0.0
servers:
  - url: https://localhost:3445/api/v1
  
paths:
  /products:
    post:
      description: Add a product and returns the product ID.
      tags:
        - products
      operationId: createProduct
      requestBody:
        required: true
        description: A JSON object that contains product name, description, price and quantity.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Created product
          headers:
            Location:
              required: true
              description: URL to get the newly-created product.
              schema:
                type: string
                example: https://localhost:3445/v1/products/1
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: ID of the created product.
                    example: 1
                required:
                  - id
          links:
            GetProductById:   
              operationId: getProductById
              parameters:
                productId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as
                the `productId` parameter in `GET /products/{productId}`.
            UpdateProduct:   
              operationId: updateProduct
              parameters:
                productId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as
                the `productId` parameter in `PUT /products/{productId}`.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/NotAllowedError'
        '409':
          description: Product already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: A product with that name already exists.
        '500':
          $ref: '#/components/responses/InternalError'

    get:
      description: Get all products.
      tags:
        - products
      operationId: getAllProducts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: products list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalError'
          
  /products/{productId}:  
    get:
      description: Get product info by ID.
      tags:
        - products
      operationId: getProductById
      parameters:
        - in: path
          description: Numeric identifier of the product to get.
          name: productId
          required: true
          schema:
            type: integer
          example: 1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: product info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: product not found.
        '500':
          $ref: '#/components/responses/InternalError'

    put:
      description: Update product.
      tags:
        - products
      operationId: updateProduct
      parameters:
        - in: path
          description: Numeric identifier of the product to update.
          name: productId
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        description: A JSON object that contains product name, description, price and quantity.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: updated product info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/NotAllowedError'
        '404':
          description: product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: product not found.
        '500':
          $ref: '#/components/responses/InternalError'

components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Access token is missing or invalid.
    NotAllowedError:
      description: Logged user doesn't have permission to access the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: You don't have permissions to access this resource.
    BadRequestError:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Bad request.
    InternalError:
      description: Internal error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Internal error.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ProductRequest:
      type: object
      required:
        - name
        - description
        - price
        - quantity
      properties:
        name:
          description: Product name
          type: string
          minLength: 3
          example: shoes 
        description:
          description: Product description.
          type: string
          minLength: 3
          example: comfortable shoes
        price:
          description: Product price.
          type: number
          example: 29.99
        quantity:
          description: Product quantity to add.
          type: integer
          example: 10
    ProductResponse:
      type: object
      properties:
        id:
          description: product ID.
          type: integer
          example: 1
        name:
          description: Product name
          type: string
          minLength: 3
          example: shoes 
        description:
          description: Product description.
          type: string
          minLength: 3
          example: comfortable shoes
        price:
          description: Product price.
          type: number
          example: 29.99
        quantity:
          description: Product quantity to add.
          type: integer
          example: 10
      required:
        - id
        - name
        - description
        - price
        - quantity
    Error:
        type: object
        description: error message.
        properties:
          error:
            type: string
        required: 
          - error